// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")
// }

// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  email    String?
  password String
}

// enum CotizacionStatus {
//   DRAFT // Borrador
//   SENT // Enviada
//   ACCEPTED // Aceptada
//   REJECTED // Rechazada
//   EXPIRED // Expirada
// }

enum CotizacionStatus {
  ESTADO1
  ESTADO2
  ESTADO3
  ESTADO4
  ESTADO5
  ESTADO6
}

enum Currency {
  SOLES
  DOLARES
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

model Client {
  id         Int          @id @default(autoincrement())
  name       String
  contact    String
  ruc        String
  reference  String
  createAt   DateTime     @default(now())
  Cotizacion Cotizacion[]
}

model Cotizacion {
  id                          Int              @id @default(autoincrement())
  status                      CotizacionStatus @default(ESTADO1)
  code                        String
  parentCode                  String
  clientId                    Int?
  client                      Client?          @relation(fields: [clientId], references: [id])
  currency                    Currency         @default(SOLES)
  unregisteredClientName      String?
  unregisteredClientContact   String?
  unregisteredClientReference String?
  unregisteredClientRuc       String?
  //frontend values
  date                        DateTime
  deliverTime                 String           @default("") // Tiempo de entrega
  paymentCondition            String           @default("") // condicion de pagp
  deliverPlace                String           @default("") // lugar de entrega
  offerValidity               String           @default("") // validez de oferta
  generalCondicion            String           @default("")
  comments                    String           @default("")
  totalPrice                  Float            @default(0.00)
  isEdit                      Boolean          @default(false)
  includeIgv                  Boolean          @default(true)

  cotizacionItem CotizacionItem[]
}

model CotizacionItem {
  id         Int        @id @default(autoincrement())
  item       Item       @relation(fields: [itemId], references: [id])
  cotizacion Cotizacion @relation(fields: [cotizacionId], references: [id])
  unitPrice  Float      @default(0.00)
  amount     Float      @default(0.00)

  totalPrice Float @default(0.00)

  itemId       Int
  cotizacionId Int

  @@unique([itemId, cotizacionId]) // Garantiza que un Item solo se relacione una vez por Cotización
}

enum UnitOfMeasure {
  UNIT //unidad
  PIECE //Pieza
  KILOGRAM // Kilogramo
  GRAM // Gramo
  LITER // Litro
  MILLILITER // Mililitro
  METER // Metro
  CENTIMETER // Centímetro
  BOX // Caja
}

model Item {
  id             Int              @id @default(autoincrement())
  name           String
  brand          String           @default("")
  description    String           @default("")
  partNumber     String           @default("")
  weight         Float
  unitPrice      Float
  code           String           @unique
  unitMeasure    UnitOfMeasure    @default(UNIT)
  status         ProductStatus    @default(ACTIVE)
  CotizacionItem CotizacionItem[]
}

model LastCodeCotizacion {
  id           Int @id @default(autoincrement())
  cotizacionId Int
  nextCode     Int @default(0)
}

model CodeCotizacion {
  id       Int @id @default(autoincrement())
  nextCode Int
}
